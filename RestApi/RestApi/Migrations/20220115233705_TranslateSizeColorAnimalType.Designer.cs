// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace RestApi.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220115233705_TranslateSizeColorAnimalType")]
    partial class TranslateSizeColorAnimalType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.13");

            modelBuilder.Entity("Entities.Models.AdoptionApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("AdoptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("AdoptionApplications");
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Character")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ColorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDead")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Sex")
                        .HasColumnType("bit");

                    b.Property<Guid>("SizeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Views")
                        .HasColumnType("int");

                    b.Property<int>("WalkLimit")
                        .HasColumnType("int");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AnimalTypeId");

                    b.HasIndex("ColorId");

                    b.HasIndex("ModifiedBy");

                    b.HasIndex("SizeId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Entities.Models.AnimalType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("AnimalTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("63229941-ad9f-4be5-b7d0-7388a4851791"),
                            Value = "Dog"
                        },
                        new
                        {
                            Id = new Guid("53bb8991-f7dd-4409-8286-ec2236c6398b"),
                            Value = "Cat"
                        });
                });

            modelBuilder.Entity("Entities.Models.Color", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e55c7c3a-2398-485d-b673-103c17b6c991"),
                            Value = "Black"
                        },
                        new
                        {
                            Id = new Guid("451b4421-50aa-4915-9b5b-69ce6b241ae6"),
                            Value = "White"
                        },
                        new
                        {
                            Id = new Guid("8e1267a3-e2f2-4396-b556-663227e29976"),
                            Value = "Mixed"
                        },
                        new
                        {
                            Id = new Guid("a3bf36c7-b6b2-44e0-8c8c-58de79228206"),
                            Value = "Red"
                        },
                        new
                        {
                            Id = new Guid("67d14cc9-e4b0-499f-b632-4d5e0c6a2704"),
                            Value = "Tricolor"
                        },
                        new
                        {
                            Id = new Guid("04de7cb5-1f56-4269-8b7e-453baa927c9f"),
                            Value = "Blue"
                        },
                        new
                        {
                            Id = new Guid("00eba627-b485-4266-9635-7a3e3a172865"),
                            Value = "Grey"
                        },
                        new
                        {
                            Id = new Guid("2fc290a4-2d36-45b9-aa1e-1f1d8dd6e593"),
                            Value = "Fawn"
                        },
                        new
                        {
                            Id = new Guid("05cd10a2-55f4-420b-aa1c-f9fbcba9d1f8"),
                            Value = "Cream"
                        },
                        new
                        {
                            Id = new Guid("ed8f7ddd-8eca-4bc7-9a88-7ebec592dea7"),
                            Value = "Gold"
                        },
                        new
                        {
                            Id = new Guid("417c61f4-1375-4958-93f3-c80dee573ef1"),
                            Value = "Yellow"
                        },
                        new
                        {
                            Id = new Guid("ef84d4c5-fbc6-484f-9417-896d7e564035"),
                            Value = "Brown"
                        });
                });

            modelBuilder.Entity("Entities.Models.Config", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.HasIndex("ModifiedBy");

                    b.ToTable("Configs");

                    b.HasData(
                        new
                        {
                            Key = "City",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 551, DateTimeKind.Local).AddTicks(9606),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "Street",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(842),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "HouseNumber",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(855),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "Postcode",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(858),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "AccountNumber",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(860),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "Description",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(862),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "Name",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(865),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        },
                        new
                        {
                            Key = "Country",
                            ModifiedAt = new DateTime(2022, 1, 16, 0, 37, 4, 552, DateTimeKind.Local).AddTicks(867),
                            ModifiedBy = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            Value = ""
                        });
                });

            modelBuilder.Entity("Entities.Models.Donation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FundraiserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FundraiserId");

                    b.HasIndex("UserId");

                    b.ToTable("Donations");
                });

            modelBuilder.Entity("Entities.Models.Fundraiser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FinishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Fundraisers");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsProfilePicture")
                        .HasColumnType("bit");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Entities.Models.Size", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Sizes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c170ac5b-4e31-487b-ba06-5c9e985c307f"),
                            Value = "Very small"
                        },
                        new
                        {
                            Id = new Guid("750cc209-6102-4d17-9ec5-b6d9d4788525"),
                            Value = "Small"
                        },
                        new
                        {
                            Id = new Guid("6ec77095-31f5-4c2f-8582-b61b671bbfc0"),
                            Value = "Big"
                        },
                        new
                        {
                            Id = new Guid("7f55d83b-b703-4d4d-97be-121f2b099f06"),
                            Value = "Medium"
                        },
                        new
                        {
                            Id = new Guid("fe5851b0-6ef8-4c91-9fb6-6bf92d72effb"),
                            Value = "Very big"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasMaxLength(256)
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "400af917-5dc8-45ba-aab6-afa4d423e726",
                            DateOfBirth = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "admin.animalshelter@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Admin",
                            NormalizedEmail = "ADMIN.ANIMALSHELTER@GMAIL.COM",
                            NormalizedUserName = "ADMIN.ANIMALSHELTER@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBFfLYgvQmrkIpQgTBiETwIeMTRtIJlTSAneo/qEZnAmyGDE4hvuRJTJWaN0Bteszg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f85c26e-5d59-453e-ac68-7078b8b2cdfd",
                            Surname = "Admin",
                            TwoFactorEnabled = false,
                            UserName = "admin.animalshelter@gmail.com"
                        });
                });

            modelBuilder.Entity("Entities.Models.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<Guid>("AnimalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AnimalId");

                    b.HasIndex("UserId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "0a747698-be88-4c59-93d4-3bbccdf43dfc",
                            ConcurrencyStamp = "f9b273fc-2b99-40e3-88b7-9c1213c18e70",
                            Name = "CommonUser",
                            NormalizedName = "COMMON"
                        },
                        new
                        {
                            Id = "e643aedc-b67e-4ad2-9d84-7019ee5f4f21",
                            ConcurrencyStamp = "fc03ce40-874d-41c6-9e0b-7810b21c9b38",
                            Name = "Administrator",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "B22698B8-42A2-4115-9631-1C2D1E2AC5F7",
                            RoleId = "e643aedc-b67e-4ad2-9d84-7019ee5f4f21"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Entities.Models.AdoptionApplication", b =>
                {
                    b.HasOne("Entities.Models.Animal", "Animal")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("AdoptionApplications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.HasOne("Entities.Models.AnimalType", "AnimalType")
                        .WithMany("Animals")
                        .HasForeignKey("AnimalTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.Color", "Color")
                        .WithMany("Animals")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Animals")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Entities.Models.Size", "Size")
                        .WithMany("Animals")
                        .HasForeignKey("SizeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AnimalType");

                    b.Navigation("Color");

                    b.Navigation("Size");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Config", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Configs")
                        .HasForeignKey("ModifiedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Donation", b =>
                {
                    b.HasOne("Entities.Models.Fundraiser", "Fundraiser")
                        .WithMany("Donations")
                        .HasForeignKey("FundraiserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Donations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Fundraiser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Fundraiser", b =>
                {
                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Fundraisers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Image", b =>
                {
                    b.HasOne("Entities.Models.Animal", "Animal")
                        .WithMany("Images")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Entities.Models.Walk", b =>
                {
                    b.HasOne("Entities.Models.Animal", "Animal")
                        .WithMany("Walks")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Walks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Animal", b =>
                {
                    b.Navigation("AdoptionApplications");

                    b.Navigation("Images");

                    b.Navigation("Walks");
                });

            modelBuilder.Entity("Entities.Models.AnimalType", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Entities.Models.Color", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Entities.Models.Fundraiser", b =>
                {
                    b.Navigation("Donations");
                });

            modelBuilder.Entity("Entities.Models.Size", b =>
                {
                    b.Navigation("Animals");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("AdoptionApplications");

                    b.Navigation("Animals");

                    b.Navigation("Configs");

                    b.Navigation("Donations");

                    b.Navigation("Fundraisers");

                    b.Navigation("Walks");
                });
#pragma warning restore 612, 618
        }
    }
}
